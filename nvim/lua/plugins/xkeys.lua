return {
  {                     -- Useful plugin to show you pending keybinds.
    'folke/which-key.nvim',
    event = 'VimEnter', -- Sets the loading event to 'VimEnter'
    opts = {
      icons = {
        -- set icon mappings to true if you have a Nerd Font
        mappings = vim.g.have_nerd_font,
        -- If you are using a Nerd Font: set icons.keys to an empty table which will use the
        -- default whick-key.nvim defined Nerd Font icons, otherwise define a string table
        keys = vim.g.have_nerd_font and {} or {
          Up = '<Up> ',
          Down = '<Down> ',
          Left = '<Left> ',
          Right = '<Right> ',
          C = '<C-…> ',
          M = '<M-…> ',
          D = '<D-…> ',
          S = '<S-…> ',
          CR = '<CR> ',
          Esc = '<Esc> ',
          ScrollWheelDown = '<ScrollWheelDown> ',
          ScrollWheelUp = '<ScrollWheelUp> ',
          NL = '<NL> ',
          BS = '<BS> ',
          Space = '<Space> ',
          Tab = '<Tab> ',
          F1 = '<F1>',
          F2 = '<F2>',
          F3 = '<F3>',
          F4 = '<F4>',
          F5 = '<F5>',
          F6 = '<F6>',
          F7 = '<F7>',
          F8 = '<F8>',
          F9 = '<F9>',
          F10 = '<F10>',
          F11 = '<F11>',
          F12 = '<F12>',
        },
      },

      -- Document existing key chains
      spec = {
        { '<leader>c', group = '[C]ode',     mode = { 'n', 'x' } },
        { '<leader>d', group = '[D]ocument' },
        { '<leader>r', group = '[R]ename' },
        { '<leader>s', group = '[S]earch' },
        { '<leader>w', group = '[W]orkspace' },
        { '<leader>t', group = '[T]oggle' },
        { '<leader>h', group = 'Git [H]unk', mode = { 'n', 'v' } },
      },
    },
    keys = {
      { '<leader>tn', vim.cmd.tabnew,                                                         desc = 'new Tab' },
      { '<leader>lg', vim.cmd.LazyGitCurrentFile,                                             desc = 'LazyGit' },
      { '<leader>lp', ':Lazy<cr>',                                                            desc = 'Lazy' },
      { '<leader>ls', ':LspStart<cr>',                                                        desc = 'LSP Start' },
      { '<leader>lk', ':LspStop<cr>',                                                         desc = 'LSP stop' },
      { '<leader>lm', ':Mason<cr>',                                                           desc = 'Mason' },
      { '<leader>lc', ':CodeCompanionActions<cr>',                                            desc = 'CodeCompanion' },
      { '<leader>lz', ':ZenMode<cr>',                                                         desc = 'ZenMode' },
      { '<leader>aa', ':Alpha<cr>',                                                           desc = 'Alpha' },
      { '<Esc>',      '<cmd>nohlsearch<CR>',                                                  desc = 'cancel search' },
      { '<leader>q',  vim.diagnostic.setloclist,                                              desc = 'Open diagnostic [Q]uickfix list' },
      { '<C-h>',      '<C-w><C-h>',                                                           desc = 'Move focus to the left window' },
      { '<C-l>',      '<C-w><C-l>',                                                           desc = 'Move focus to the right window' },
      { '<C-j>',      '<C-w><C-j>',                                                           desc = 'Move focus to the lower window' },
      { '<C-k>',      '<C-w><C-k>',                                                           desc = 'Move focus to the upper window' },
      { '<leader>S',  '<cmd>lua require("spectre").toggle()<CR>',                             desc = 'Toggle Spectre' },
      { '<leader>sr', '<cmd>lua require("spectre").open_visual({select_word=true})<CR>',      desc = 'Search current word' },
      { '<leader>sr', '<esc><cmd>lua require("spectre").open_visual()<CR>',                   desc = 'Search current word',            mode = "v" },
      { '<leader>sp', '<cmd>lua require("spectre").open_file_search({select_word=true})<CR>', desc = 'Search on current file' },
    },
  },
}
